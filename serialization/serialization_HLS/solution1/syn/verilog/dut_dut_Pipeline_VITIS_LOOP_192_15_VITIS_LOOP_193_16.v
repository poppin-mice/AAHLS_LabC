// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_VITIS_LOOP_192_15_VITIS_LOOP_193_16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        add_ln177_1,
        dst_buff,
        var_string_length_address0,
        var_string_length_ce0,
        var_string_length_q0,
        dst_counter_20_out,
        dst_counter_20_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [7:0] m_axi_gmem_WDATA;
output  [0:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [7:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [10:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] add_ln177_1;
input  [63:0] dst_buff;
output  [9:0] var_string_length_address0;
output   var_string_length_ce0;
input  [31:0] var_string_length_q0;
output  [31:0] dst_counter_20_out;
output   dst_counter_20_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_BREADY;
reg var_string_length_ce0;
reg dst_counter_20_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln192_fu_191_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln192_reg_459;
reg   [0:0] icmp_ln192_reg_459_pp0_iter2_reg;
reg   [0:0] icmp_ln192_reg_459_pp0_iter3_reg;
reg   [0:0] icmp_ln192_reg_459_pp0_iter4_reg;
reg   [0:0] icmp_ln192_reg_459_pp0_iter5_reg;
reg   [0:0] icmp_ln192_reg_459_pp0_iter6_reg;
reg   [0:0] icmp_ln192_reg_459_pp0_iter7_reg;
wire   [0:0] icmp_ln193_fu_209_p2;
reg   [0:0] icmp_ln193_reg_463;
reg   [0:0] icmp_ln193_reg_463_pp0_iter2_reg;
wire   [2:0] select_ln192_fu_215_p3;
reg   [2:0] select_ln192_reg_469;
wire   [1:0] trunc_ln194_fu_223_p1;
reg   [1:0] trunc_ln194_reg_474;
reg   [1:0] trunc_ln194_reg_474_pp0_iter2_reg;
wire   [0:0] icmp_ln195_fu_227_p2;
reg   [0:0] icmp_ln195_reg_479;
reg   [0:0] icmp_ln195_reg_479_pp0_iter2_reg;
reg   [63:0] gmem_addr_reg_490;
reg   [31:0] var_string_length_load_reg_496;
wire   [7:0] trunc_ln194_1_fu_373_p1;
reg   [7:0] trunc_ln194_1_reg_501;
wire   [63:0] zext_ln198_fu_233_p1;
wire   [63:0] add_ln194_1_fu_289_p2;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] j_fu_86;
wire   [2:0] j_5_fu_252_p2;
wire    ap_loop_init;
reg   [31:0] position_fu_90;
wire   [31:0] position_4_fu_390_p3;
reg   [31:0] dst_counter_fu_94;
wire   [31:0] dst_counter_8_fu_306_p3;
reg   [31:0] counter_fu_98;
wire   [31:0] counter_8_fu_244_p3;
reg   [9:0] i_fu_102;
wire   [9:0] select_ln192_2_fu_349_p3;
reg   [11:0] indvar_flatten126_fu_106;
wire   [11:0] add_ln192_fu_197_p2;
wire   [31:0] counter_7_fu_238_p2;
wire   [31:0] j_14_cast11_fu_276_p1;
wire   [31:0] add_ln194_fu_279_p2;
wire   [63:0] zext_ln194_fu_285_p1;
wire   [31:0] dst_counter_7_fu_300_p2;
wire   [9:0] add_ln192_1_fu_324_p2;
wire   [0:0] cmp316_mid1_fu_330_p2;
wire   [0:0] cmp316141_fu_336_p2;
wire   [4:0] shl_ln1_fu_356_p3;
wire   [31:0] zext_ln194_1_fu_363_p1;
wire   [31:0] lshr_ln194_fu_367_p2;
wire   [0:0] select_ln192_1_fu_342_p3;
wire   [31:0] position_2_fu_377_p2;
wire   [31:0] position_3_fu_382_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            counter_fu_98 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln192_fu_191_p2 == 1'd0))) begin
            counter_fu_98 <= counter_8_fu_244_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dst_counter_fu_94 <= add_ln177_1;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            dst_counter_fu_94 <= dst_counter_8_fu_306_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_102 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            i_fu_102 <= select_ln192_2_fu_349_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten126_fu_106 <= 12'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln192_fu_191_p2 == 1'd0))) begin
            indvar_flatten126_fu_106 <= add_ln192_fu_197_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_86 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln192_fu_191_p2 == 1'd0))) begin
            j_fu_86 <= j_5_fu_252_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            position_fu_90 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            position_fu_90 <= position_4_fu_390_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln192_reg_459 <= icmp_ln192_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        gmem_addr_reg_490 <= add_ln194_1_fu_289_p2;
        icmp_ln192_reg_459_pp0_iter2_reg <= icmp_ln192_reg_459;
        icmp_ln192_reg_459_pp0_iter3_reg <= icmp_ln192_reg_459_pp0_iter2_reg;
        icmp_ln192_reg_459_pp0_iter4_reg <= icmp_ln192_reg_459_pp0_iter3_reg;
        icmp_ln192_reg_459_pp0_iter5_reg <= icmp_ln192_reg_459_pp0_iter4_reg;
        icmp_ln192_reg_459_pp0_iter6_reg <= icmp_ln192_reg_459_pp0_iter5_reg;
        icmp_ln192_reg_459_pp0_iter7_reg <= icmp_ln192_reg_459_pp0_iter6_reg;
        icmp_ln193_reg_463_pp0_iter2_reg <= icmp_ln193_reg_463;
        icmp_ln195_reg_479_pp0_iter2_reg <= icmp_ln195_reg_479;
        trunc_ln194_1_reg_501 <= trunc_ln194_1_fu_373_p1;
        trunc_ln194_reg_474_pp0_iter2_reg <= trunc_ln194_reg_474;
        var_string_length_load_reg_496 <= var_string_length_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln192_fu_191_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln193_reg_463 <= icmp_ln193_fu_209_p2;
        icmp_ln195_reg_479 <= icmp_ln195_fu_227_p2;
        select_ln192_reg_469 <= select_ln192_fu_215_p3;
        trunc_ln194_reg_474 <= trunc_ln194_fu_223_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln192_fu_191_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln192_reg_459_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_counter_20_out_ap_vld = 1'b1;
    end else begin
        dst_counter_20_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        var_string_length_ce0 = 1'b1;
    end else begin
        var_string_length_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln192_1_fu_324_p2 = (i_fu_102 + 10'd1);

assign add_ln192_fu_197_p2 = (indvar_flatten126_fu_106 + 12'd1);

assign add_ln194_1_fu_289_p2 = (zext_ln194_fu_285_p1 + dst_buff);

assign add_ln194_fu_279_p2 = (j_14_cast11_fu_276_p1 + dst_counter_fu_94);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign cmp316141_fu_336_p2 = ((i_fu_102 < 10'd1000) ? 1'b1 : 1'b0);

assign cmp316_mid1_fu_330_p2 = ((add_ln192_1_fu_324_p2 < 10'd1000) ? 1'b1 : 1'b0);

assign counter_7_fu_238_p2 = (counter_fu_98 + 32'd1);

assign counter_8_fu_244_p3 = ((icmp_ln195_fu_227_p2[0:0] == 1'b1) ? counter_7_fu_238_p2 : counter_fu_98);

assign dst_counter_20_out = dst_counter_fu_94;

assign dst_counter_7_fu_300_p2 = (dst_counter_fu_94 + 32'd4);

assign dst_counter_8_fu_306_p3 = ((icmp_ln195_reg_479[0:0] == 1'b1) ? dst_counter_7_fu_300_p2 : dst_counter_fu_94);

assign icmp_ln192_fu_191_p2 = ((indvar_flatten126_fu_106 == 12'd4004) ? 1'b1 : 1'b0);

assign icmp_ln193_fu_209_p2 = ((j_fu_86 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_227_p2 = ((select_ln192_fu_215_p3 == 3'd3) ? 1'b1 : 1'b0);

assign j_14_cast11_fu_276_p1 = select_ln192_reg_469;

assign j_5_fu_252_p2 = (select_ln192_fu_215_p3 + 3'd1);

assign lshr_ln194_fu_367_p2 = position_fu_90 >> zext_ln194_1_fu_363_p1;

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_490;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = trunc_ln194_1_reg_501;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 1'd1;

assign m_axi_gmem_WUSER = 1'd0;

assign position_2_fu_377_p2 = (var_string_length_load_reg_496 + position_fu_90);

assign position_3_fu_382_p3 = ((select_ln192_1_fu_342_p3[0:0] == 1'b1) ? position_2_fu_377_p2 : position_fu_90);

assign position_4_fu_390_p3 = ((icmp_ln195_reg_479_pp0_iter2_reg[0:0] == 1'b1) ? position_3_fu_382_p3 : position_fu_90);

assign select_ln192_1_fu_342_p3 = ((icmp_ln193_reg_463_pp0_iter2_reg[0:0] == 1'b1) ? cmp316_mid1_fu_330_p2 : cmp316141_fu_336_p2);

assign select_ln192_2_fu_349_p3 = ((icmp_ln193_reg_463_pp0_iter2_reg[0:0] == 1'b1) ? add_ln192_1_fu_324_p2 : i_fu_102);

assign select_ln192_fu_215_p3 = ((icmp_ln193_fu_209_p2[0:0] == 1'b1) ? 3'd0 : j_fu_86);

assign shl_ln1_fu_356_p3 = {{trunc_ln194_reg_474_pp0_iter2_reg}, {3'd0}};

assign trunc_ln194_1_fu_373_p1 = lshr_ln194_fu_367_p2[7:0];

assign trunc_ln194_fu_223_p1 = select_ln192_fu_215_p3[1:0];

assign var_string_length_address0 = zext_ln198_fu_233_p1;

assign zext_ln194_1_fu_363_p1 = shl_ln1_fu_356_p3;

assign zext_ln194_fu_285_p1 = add_ln194_fu_279_p2;

assign zext_ln198_fu_233_p1 = counter_fu_98;

endmodule //dut_dut_Pipeline_VITIS_LOOP_192_15_VITIS_LOOP_193_16
