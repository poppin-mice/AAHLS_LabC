-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dut_Pipeline_VITIS_LOOP_63_3_VITIS_LOOP_64_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    skip_row_arr_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    skip_row_arr_ce0 : OUT STD_LOGIC;
    skip_row_arr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln31 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln63 : IN STD_LOGIC_VECTOR (6 downto 0);
    dst_buff : IN STD_LOGIC_VECTOR (63 downto 0);
    src_buff : IN STD_LOGIC_VECTOR (63 downto 0);
    dst_counter_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_counter_1_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1424_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1424_p_din1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1424_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1424_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_dut_Pipeline_VITIS_LOOP_63_3_VITIS_LOOP_64_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1F40 : STD_LOGIC_VECTOR (12 downto 0) := "1111101000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal icmp_ln63_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op91_readreq_state7 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal icmp_ln63_reg_493_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op98_read_state14 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln63_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln63_cast_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln63_cast_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_reg_493_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_493_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln63_1_fu_253_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln63_1_reg_497 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln63_1_reg_497_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln63_1_reg_497_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln63_1_reg_497_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln65_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_502_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_506 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_506_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_506_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_506_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal skip_row_arr_load_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln72_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_527 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_527_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_533 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_read_reg_539 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter10_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter11_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter12_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter13_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter14_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter15_storemerge1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln66_1_fu_337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln66_3_fu_367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal j_fu_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_fu_295_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal dst_counter_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_counter_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_counter_5_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_counter_fu_414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_2_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln63_fu_238_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln64_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_4_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln66_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln66_2_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln66_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_1_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal src_counter_6_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_counter_7_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_counter_4_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_counter_8_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_408 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_mul_32s_5ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter19_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter15_storemerge1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln65_reg_502_pp0_iter13_reg = ap_const_lv1_1) and (icmp_ln63_reg_493_pp0_iter13_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter15_storemerge1_reg_188 <= gmem_addr_2_read_reg_539;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter15_storemerge1_reg_188 <= ap_phi_reg_pp0_iter14_storemerge1_reg_188;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_storemerge1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_408)) then
                if (((icmp_ln65_fu_261_p2 = ap_const_lv1_0) and (icmp_ln63_fu_232_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_storemerge1_reg_188 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge1_reg_188 <= ap_phi_reg_pp0_iter1_storemerge1_reg_188;
                end if;
            end if; 
        end if;
    end process;

    counter_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    counter_2_fu_108 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_fu_232_p2 = ap_const_lv1_0))) then 
                    counter_2_fu_108 <= counter_fu_287_p3;
                end if;
            end if; 
        end if;
    end process;

    dst_counter_1_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    dst_counter_1_fu_100 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    dst_counter_1_fu_100 <= dst_counter_fu_407_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_fu_232_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_112 <= add_ln63_fu_238_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_96 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_fu_232_p2 = ap_const_lv1_0))) then 
                    j_fu_96 <= j_2_fu_295_p2;
                end if;
            end if; 
        end if;
    end process;

    src_counter_5_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_counter_5_fu_104 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    src_counter_5_fu_104 <= src_counter_fu_414_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_reg_527_pp0_iter10_reg <= gmem_addr_reg_527_pp0_iter9_reg;
                gmem_addr_reg_527_pp0_iter11_reg <= gmem_addr_reg_527_pp0_iter10_reg;
                gmem_addr_reg_527_pp0_iter12_reg <= gmem_addr_reg_527_pp0_iter11_reg;
                gmem_addr_reg_527_pp0_iter13_reg <= gmem_addr_reg_527_pp0_iter12_reg;
                gmem_addr_reg_527_pp0_iter6_reg <= gmem_addr_reg_527;
                gmem_addr_reg_527_pp0_iter7_reg <= gmem_addr_reg_527_pp0_iter6_reg;
                gmem_addr_reg_527_pp0_iter8_reg <= gmem_addr_reg_527_pp0_iter7_reg;
                gmem_addr_reg_527_pp0_iter9_reg <= gmem_addr_reg_527_pp0_iter8_reg;
                icmp_ln63_reg_493_pp0_iter10_reg <= icmp_ln63_reg_493_pp0_iter9_reg;
                icmp_ln63_reg_493_pp0_iter11_reg <= icmp_ln63_reg_493_pp0_iter10_reg;
                icmp_ln63_reg_493_pp0_iter12_reg <= icmp_ln63_reg_493_pp0_iter11_reg;
                icmp_ln63_reg_493_pp0_iter13_reg <= icmp_ln63_reg_493_pp0_iter12_reg;
                icmp_ln63_reg_493_pp0_iter14_reg <= icmp_ln63_reg_493_pp0_iter13_reg;
                icmp_ln63_reg_493_pp0_iter15_reg <= icmp_ln63_reg_493_pp0_iter14_reg;
                icmp_ln63_reg_493_pp0_iter16_reg <= icmp_ln63_reg_493_pp0_iter15_reg;
                icmp_ln63_reg_493_pp0_iter17_reg <= icmp_ln63_reg_493_pp0_iter16_reg;
                icmp_ln63_reg_493_pp0_iter18_reg <= icmp_ln63_reg_493_pp0_iter17_reg;
                icmp_ln63_reg_493_pp0_iter2_reg <= icmp_ln63_reg_493;
                icmp_ln63_reg_493_pp0_iter3_reg <= icmp_ln63_reg_493_pp0_iter2_reg;
                icmp_ln63_reg_493_pp0_iter4_reg <= icmp_ln63_reg_493_pp0_iter3_reg;
                icmp_ln63_reg_493_pp0_iter5_reg <= icmp_ln63_reg_493_pp0_iter4_reg;
                icmp_ln63_reg_493_pp0_iter6_reg <= icmp_ln63_reg_493_pp0_iter5_reg;
                icmp_ln63_reg_493_pp0_iter7_reg <= icmp_ln63_reg_493_pp0_iter6_reg;
                icmp_ln63_reg_493_pp0_iter8_reg <= icmp_ln63_reg_493_pp0_iter7_reg;
                icmp_ln63_reg_493_pp0_iter9_reg <= icmp_ln63_reg_493_pp0_iter8_reg;
                icmp_ln65_reg_502_pp0_iter10_reg <= icmp_ln65_reg_502_pp0_iter9_reg;
                icmp_ln65_reg_502_pp0_iter11_reg <= icmp_ln65_reg_502_pp0_iter10_reg;
                icmp_ln65_reg_502_pp0_iter12_reg <= icmp_ln65_reg_502_pp0_iter11_reg;
                icmp_ln65_reg_502_pp0_iter13_reg <= icmp_ln65_reg_502_pp0_iter12_reg;
                icmp_ln65_reg_502_pp0_iter2_reg <= icmp_ln65_reg_502;
                icmp_ln65_reg_502_pp0_iter3_reg <= icmp_ln65_reg_502_pp0_iter2_reg;
                icmp_ln65_reg_502_pp0_iter4_reg <= icmp_ln65_reg_502_pp0_iter3_reg;
                icmp_ln65_reg_502_pp0_iter5_reg <= icmp_ln65_reg_502_pp0_iter4_reg;
                icmp_ln65_reg_502_pp0_iter6_reg <= icmp_ln65_reg_502_pp0_iter5_reg;
                icmp_ln65_reg_502_pp0_iter7_reg <= icmp_ln65_reg_502_pp0_iter6_reg;
                icmp_ln65_reg_502_pp0_iter8_reg <= icmp_ln65_reg_502_pp0_iter7_reg;
                icmp_ln65_reg_502_pp0_iter9_reg <= icmp_ln65_reg_502_pp0_iter8_reg;
                icmp_ln70_reg_506_pp0_iter2_reg <= icmp_ln70_reg_506;
                icmp_ln70_reg_506_pp0_iter3_reg <= icmp_ln70_reg_506_pp0_iter2_reg;
                icmp_ln70_reg_506_pp0_iter4_reg <= icmp_ln70_reg_506_pp0_iter3_reg;
                select_ln63_1_reg_497_pp0_iter2_reg <= select_ln63_1_reg_497;
                select_ln63_1_reg_497_pp0_iter3_reg <= select_ln63_1_reg_497_pp0_iter2_reg;
                select_ln63_1_reg_497_pp0_iter4_reg <= select_ln63_1_reg_497_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln63_reg_493 <= icmp_ln63_fu_232_p2;
                    select_ln63_cast_reg_488(6 downto 0) <= select_ln63_cast_fu_200_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storemerge1_reg_188 <= ap_phi_reg_pp0_iter9_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_storemerge1_reg_188 <= ap_phi_reg_pp0_iter10_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_storemerge1_reg_188 <= ap_phi_reg_pp0_iter11_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_storemerge1_reg_188 <= ap_phi_reg_pp0_iter12_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_storemerge1_reg_188 <= ap_phi_reg_pp0_iter13_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storemerge1_reg_188 <= ap_phi_reg_pp0_iter0_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_storemerge1_reg_188 <= ap_phi_reg_pp0_iter2_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_storemerge1_reg_188 <= ap_phi_reg_pp0_iter3_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_storemerge1_reg_188 <= ap_phi_reg_pp0_iter4_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_storemerge1_reg_188 <= ap_phi_reg_pp0_iter5_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storemerge1_reg_188 <= ap_phi_reg_pp0_iter6_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_storemerge1_reg_188 <= ap_phi_reg_pp0_iter7_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storemerge1_reg_188 <= ap_phi_reg_pp0_iter8_storemerge1_reg_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op98_read_state14 = ap_const_boolean_1))) then
                gmem_addr_2_read_reg_539 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_reg_502_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln63_reg_493_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_2_reg_533 <= add_ln66_3_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_493_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_reg_527 <= add_ln66_1_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln65_reg_502 <= icmp_ln65_fu_261_p2;
                icmp_ln70_reg_506 <= icmp_ln70_fu_270_p2;
                select_ln63_1_reg_497 <= select_ln63_1_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_reg_506_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln31 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln72_reg_522 <= grp_fu_1424_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                skip_row_arr_load_reg_517 <= skip_row_arr_q0;
            end if;
        end if;
    end process;
    select_ln63_cast_reg_488(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln63_fu_238_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_112) + unsigned(ap_const_lv13_1));
    add_ln66_1_fu_337_p2 <= std_logic_vector(unsigned(zext_ln66_fu_333_p1) + unsigned(dst_buff));
    add_ln66_2_fu_351_p2 <= std_logic_vector(unsigned(src_counter_5_fu_104) + unsigned(ap_const_lv32_A));
    add_ln66_3_fu_367_p2 <= std_logic_vector(unsigned(zext_ln66_1_fu_363_p1) + unsigned(src_buff));
    add_ln66_fu_327_p2 <= std_logic_vector(unsigned(j_cast_fu_324_p1) + unsigned(dst_counter_1_fu_100));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter20, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_predicate_op98_read_state14)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_predicate_op98_read_state14 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter20, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_block_state7_io, ap_predicate_op98_read_state14)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (m_axi_gmem_WREADY = ap_const_logic_0)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_predicate_op98_read_state14 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter20, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_block_state7_io, ap_predicate_op98_read_state14)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (m_axi_gmem_WREADY = ap_const_logic_0)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_predicate_op98_read_state14 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter13_assign_proc : process(m_axi_gmem_RVALID, ap_predicate_op98_read_state14)
    begin
                ap_block_state14_pp0_stage0_iter13 <= ((ap_predicate_op98_read_state14 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage0_iter20_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state21_pp0_stage0_iter20 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(m_axi_gmem_ARREADY, ap_predicate_op91_readreq_state7)
    begin
                ap_block_state7_io <= ((ap_predicate_op91_readreq_state7 = ap_const_boolean_1) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_408_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_408 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln63_fu_232_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_fu_232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter19_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter19_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_storemerge1_reg_188 <= "XXXXXXXX";

    ap_predicate_op91_readreq_state7_assign_proc : process(icmp_ln63_reg_493_pp0_iter5_reg, icmp_ln65_reg_502_pp0_iter5_reg)
    begin
                ap_predicate_op91_readreq_state7 <= ((icmp_ln65_reg_502_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln63_reg_493_pp0_iter5_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op98_read_state14_assign_proc : process(icmp_ln63_reg_493_pp0_iter12_reg, icmp_ln65_reg_502_pp0_iter12_reg)
    begin
                ap_predicate_op98_read_state14 <= ((icmp_ln65_reg_502_pp0_iter12_reg = ap_const_lv1_1) and (icmp_ln63_reg_493_pp0_iter12_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    counter_4_fu_281_p2 <= std_logic_vector(unsigned(counter_2_fu_108) + unsigned(ap_const_lv32_1));
    counter_fu_287_p3 <= 
        counter_4_fu_281_p2 when (icmp_ln70_fu_270_p2(0) = '1') else 
        counter_2_fu_108;
    dst_counter_1_out <= dst_counter_1_fu_100;

    dst_counter_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln63_reg_493_pp0_iter18_reg)
    begin
        if (((icmp_ln63_reg_493_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_counter_1_out_ap_vld <= ap_const_logic_1;
        else 
            dst_counter_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dst_counter_4_fu_401_p2 <= std_logic_vector(unsigned(dst_counter_1_fu_100) + unsigned(ap_const_lv32_8));
    dst_counter_fu_407_p3 <= 
        dst_counter_4_fu_401_p2 when (icmp_ln70_reg_506_pp0_iter4_reg(0) = '1') else 
        dst_counter_1_fu_100;

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter6, m_axi_gmem_ARREADY, ap_predicate_op91_readreq_state7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op91_readreq_state7 = ap_const_boolean_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter14, m_axi_gmem_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter20, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_gmem_RVALID, ap_predicate_op98_read_state14, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op98_read_state14 = ap_const_boolean_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter15, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1424_p_ce <= grp_fu_316_ce;
    grp_fu_1424_p_din0 <= skip_row_arr_load_reg_517;
    grp_fu_1424_p_din1 <= ap_const_lv32_B(5 - 1 downto 0);

    grp_fu_316_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_316_ce <= ap_const_logic_1;
        else 
            grp_fu_316_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln63_fu_232_p2 <= "1" when (indvar_flatten_fu_112 = ap_const_lv13_1F40) else "0";
    icmp_ln64_fu_247_p2 <= "1" when (j_fu_96 = ap_const_lv4_8) else "0";
    icmp_ln65_fu_261_p2 <= "1" when (unsigned(select_ln63_1_fu_253_p3) < unsigned(ap_const_lv4_3)) else "0";
    icmp_ln70_fu_270_p2 <= "1" when (select_ln63_1_fu_253_p3 = ap_const_lv4_7) else "0";
    j_2_fu_295_p2 <= std_logic_vector(unsigned(select_ln63_1_fu_253_p3) + unsigned(ap_const_lv4_1));
    j_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_1_reg_497_pp0_iter4_reg),32));
    m_axi_gmem_ARADDR <= gmem_addr_2_reg_533;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter6, ap_predicate_op91_readreq_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op91_readreq_state7 = ap_const_boolean_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_reg_527_pp0_iter13_reg;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter13, ap_predicate_op98_read_state14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op98_read_state14 = ap_const_boolean_1))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_phi_reg_pp0_iter15_storemerge1_reg_188;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv1_1;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln63_1_fu_253_p3 <= 
        ap_const_lv4_0 when (icmp_ln64_fu_247_p2(0) = '1') else 
        j_fu_96;
    select_ln63_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63),32));
    skip_row_arr_address0 <= zext_ln72_fu_276_p1(10 - 1 downto 0);

    skip_row_arr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            skip_row_arr_ce0 <= ap_const_logic_1;
        else 
            skip_row_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src_counter_6_fu_384_p2 <= std_logic_vector(unsigned(mul_ln72_reg_522) + unsigned(src_counter_5_fu_104));
    src_counter_7_fu_389_p3 <= 
        src_counter_6_fu_384_p2 when (icmp_ln31(0) = '1') else 
        src_counter_5_fu_104;
    src_counter_8_fu_396_p2 <= std_logic_vector(unsigned(src_counter_7_fu_389_p3) + unsigned(select_ln63_cast_reg_488));
    src_counter_fu_414_p3 <= 
        src_counter_8_fu_396_p2 when (icmp_ln70_reg_506_pp0_iter4_reg(0) = '1') else 
        src_counter_5_fu_104;
    sub_ln66_fu_357_p2 <= std_logic_vector(unsigned(add_ln66_2_fu_351_p2) - unsigned(j_cast_fu_324_p1));
    zext_ln66_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln66_fu_357_p2),64));
    zext_ln66_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_fu_327_p2),64));
    zext_ln72_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(counter_2_fu_108),64));
end behav;
